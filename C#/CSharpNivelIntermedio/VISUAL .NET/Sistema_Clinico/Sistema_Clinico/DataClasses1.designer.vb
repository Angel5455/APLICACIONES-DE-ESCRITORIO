'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión de runtime:4.0.30319.42000
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="SystemLetona")>  _
Partial Public Class DataClasses1DataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Definiciones de métodos de extensibilidad"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertPacientes(instance As Pacientes)
    End Sub
  Partial Private Sub UpdatePacientes(instance As Pacientes)
    End Sub
  Partial Private Sub DeletePacientes(instance As Pacientes)
    End Sub
  Partial Private Sub InsertDocumentos(instance As Documentos)
    End Sub
  Partial Private Sub UpdateDocumentos(instance As Documentos)
    End Sub
  Partial Private Sub DeleteDocumentos(instance As Documentos)
    End Sub
  Partial Private Sub InsertPrescripcion(instance As Prescripcion)
    End Sub
  Partial Private Sub UpdatePrescripcion(instance As Prescripcion)
    End Sub
  Partial Private Sub DeletePrescripcion(instance As Prescripcion)
    End Sub
  Partial Private Sub InsertCalendario(instance As Calendario)
    End Sub
  Partial Private Sub UpdateCalendario(instance As Calendario)
    End Sub
  Partial Private Sub DeleteCalendario(instance As Calendario)
    End Sub
  Partial Private Sub InsertCitas(instance As Citas)
    End Sub
  Partial Private Sub UpdateCitas(instance As Citas)
    End Sub
  Partial Private Sub DeleteCitas(instance As Citas)
    End Sub
  Partial Private Sub InsertUsuarios(instance As Usuarios)
    End Sub
  Partial Private Sub UpdateUsuarios(instance As Usuarios)
    End Sub
  Partial Private Sub DeleteUsuarios(instance As Usuarios)
    End Sub
  Partial Private Sub InsertHistorial(instance As Historial)
    End Sub
  Partial Private Sub UpdateHistorial(instance As Historial)
    End Sub
  Partial Private Sub DeleteHistorial(instance As Historial)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.Sistema_Clinico.My.MySettings.Default.SystemLetonaConnectionString2, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Pacientes() As System.Data.Linq.Table(Of Pacientes)
		Get
			Return Me.GetTable(Of Pacientes)
		End Get
	End Property
	
	Public ReadOnly Property Documentos() As System.Data.Linq.Table(Of Documentos)
		Get
			Return Me.GetTable(Of Documentos)
		End Get
	End Property
	
	Public ReadOnly Property Prescripcion() As System.Data.Linq.Table(Of Prescripcion)
		Get
			Return Me.GetTable(Of Prescripcion)
		End Get
	End Property
	
	Public ReadOnly Property Calendario() As System.Data.Linq.Table(Of Calendario)
		Get
			Return Me.GetTable(Of Calendario)
		End Get
	End Property
	
	Public ReadOnly Property Citas() As System.Data.Linq.Table(Of Citas)
		Get
			Return Me.GetTable(Of Citas)
		End Get
	End Property
	
	Public ReadOnly Property Usuarios() As System.Data.Linq.Table(Of Usuarios)
		Get
			Return Me.GetTable(Of Usuarios)
		End Get
	End Property
	
	Public ReadOnly Property Historial() As System.Data.Linq.Table(Of Historial)
		Get
			Return Me.GetTable(Of Historial)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Pacientes")>  _
Partial Public Class Pacientes
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Identidad As String
	
	Private _Paciente As String
	
	Private _Email As String
	
	Private _Direccion As String
	
	Private _Telefono As String
	
	Private _Fecha_Nacimiento As String
	
	Private _Edad As System.Nullable(Of Integer)
	
	Private _Sexo As String
	
	Private _Foto As System.Data.Linq.Binary
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnIdentidadChanging(value As String)
    End Sub
    Partial Private Sub OnIdentidadChanged()
    End Sub
    Partial Private Sub OnPacienteChanging(value As String)
    End Sub
    Partial Private Sub OnPacienteChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnDireccionChanging(value As String)
    End Sub
    Partial Private Sub OnDireccionChanged()
    End Sub
    Partial Private Sub OnTelefonoChanging(value As String)
    End Sub
    Partial Private Sub OnTelefonoChanged()
    End Sub
    Partial Private Sub OnFecha_NacimientoChanging(value As String)
    End Sub
    Partial Private Sub OnFecha_NacimientoChanged()
    End Sub
    Partial Private Sub OnEdadChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnEdadChanged()
    End Sub
    Partial Private Sub OnSexoChanging(value As String)
    End Sub
    Partial Private Sub OnSexoChanged()
    End Sub
    Partial Private Sub OnFotoChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnFotoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Identidad", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Identidad() As String
		Get
			Return Me._Identidad
		End Get
		Set
			If (String.Equals(Me._Identidad, value) = false) Then
				Me.OnIdentidadChanging(value)
				Me.SendPropertyChanging
				Me._Identidad = value
				Me.SendPropertyChanged("Identidad")
				Me.OnIdentidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Paciente", DbType:="VarChar(50)")>  _
	Public Property Paciente() As String
		Get
			Return Me._Paciente
		End Get
		Set
			If (String.Equals(Me._Paciente, value) = false) Then
				Me.OnPacienteChanging(value)
				Me.SendPropertyChanging
				Me._Paciente = value
				Me.SendPropertyChanged("Paciente")
				Me.OnPacienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="VarChar(50)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Direccion", DbType:="VarChar(100)")>  _
	Public Property Direccion() As String
		Get
			Return Me._Direccion
		End Get
		Set
			If (String.Equals(Me._Direccion, value) = false) Then
				Me.OnDireccionChanging(value)
				Me.SendPropertyChanging
				Me._Direccion = value
				Me.SendPropertyChanged("Direccion")
				Me.OnDireccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Telefono", DbType:="VarChar(50)")>  _
	Public Property Telefono() As String
		Get
			Return Me._Telefono
		End Get
		Set
			If (String.Equals(Me._Telefono, value) = false) Then
				Me.OnTelefonoChanging(value)
				Me.SendPropertyChanging
				Me._Telefono = value
				Me.SendPropertyChanged("Telefono")
				Me.OnTelefonoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha_Nacimiento", DbType:="VarChar(50)")>  _
	Public Property Fecha_Nacimiento() As String
		Get
			Return Me._Fecha_Nacimiento
		End Get
		Set
			If (String.Equals(Me._Fecha_Nacimiento, value) = false) Then
				Me.OnFecha_NacimientoChanging(value)
				Me.SendPropertyChanging
				Me._Fecha_Nacimiento = value
				Me.SendPropertyChanged("Fecha_Nacimiento")
				Me.OnFecha_NacimientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Edad", DbType:="Int")>  _
	Public Property Edad() As System.Nullable(Of Integer)
		Get
			Return Me._Edad
		End Get
		Set
			If (Me._Edad.Equals(value) = false) Then
				Me.OnEdadChanging(value)
				Me.SendPropertyChanging
				Me._Edad = value
				Me.SendPropertyChanged("Edad")
				Me.OnEdadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sexo", DbType:="VarChar(50)")>  _
	Public Property Sexo() As String
		Get
			Return Me._Sexo
		End Get
		Set
			If (String.Equals(Me._Sexo, value) = false) Then
				Me.OnSexoChanging(value)
				Me.SendPropertyChanging
				Me._Sexo = value
				Me.SendPropertyChanged("Sexo")
				Me.OnSexoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Foto", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Foto() As System.Data.Linq.Binary
		Get
			Return Me._Foto
		End Get
		Set
			If (Object.Equals(Me._Foto, value) = false) Then
				Me.OnFotoChanging(value)
				Me.SendPropertyChanging
				Me._Foto = value
				Me.SendPropertyChanged("Foto")
				Me.OnFotoChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Documentos")>  _
Partial Public Class Documentos
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Paciente As String
	
	Private _Fecha As String
	
	Private _Descripcion As String
	
	Private _Documento As System.Data.Linq.Binary
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnPacienteChanging(value As String)
    End Sub
    Partial Private Sub OnPacienteChanged()
    End Sub
    Partial Private Sub OnFechaChanging(value As String)
    End Sub
    Partial Private Sub OnFechaChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnDocumentoChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnDocumentoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Paciente", DbType:="VarChar(50)")>  _
	Public Property Paciente() As String
		Get
			Return Me._Paciente
		End Get
		Set
			If (String.Equals(Me._Paciente, value) = false) Then
				Me.OnPacienteChanging(value)
				Me.SendPropertyChanging
				Me._Paciente = value
				Me.SendPropertyChanged("Paciente")
				Me.OnPacienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="VarChar(50)")>  _
	Public Property Fecha() As String
		Get
			Return Me._Fecha
		End Get
		Set
			If (String.Equals(Me._Fecha, value) = false) Then
				Me.OnFechaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha = value
				Me.SendPropertyChanged("Fecha")
				Me.OnFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="VarChar(50)")>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Documento", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Documento() As System.Data.Linq.Binary
		Get
			Return Me._Documento
		End Get
		Set
			If (Object.Equals(Me._Documento, value) = false) Then
				Me.OnDocumentoChanging(value)
				Me.SendPropertyChanging
				Me._Documento = value
				Me.SendPropertyChanged("Documento")
				Me.OnDocumentoChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Prescripcion")>  _
Partial Public Class Prescripcion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Paciente As String
	
	Private _Fecha As String
	
	Private _Historia As String
	
	Private _Medicacion As String
	
	Private _Nota As String
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnPacienteChanging(value As String)
    End Sub
    Partial Private Sub OnPacienteChanged()
    End Sub
    Partial Private Sub OnFechaChanging(value As String)
    End Sub
    Partial Private Sub OnFechaChanged()
    End Sub
    Partial Private Sub OnHistoriaChanging(value As String)
    End Sub
    Partial Private Sub OnHistoriaChanged()
    End Sub
    Partial Private Sub OnMedicacionChanging(value As String)
    End Sub
    Partial Private Sub OnMedicacionChanged()
    End Sub
    Partial Private Sub OnNotaChanging(value As String)
    End Sub
    Partial Private Sub OnNotaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Paciente", DbType:="VarChar(50)")>  _
	Public Property Paciente() As String
		Get
			Return Me._Paciente
		End Get
		Set
			If (String.Equals(Me._Paciente, value) = false) Then
				Me.OnPacienteChanging(value)
				Me.SendPropertyChanging
				Me._Paciente = value
				Me.SendPropertyChanged("Paciente")
				Me.OnPacienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="VarChar(50)")>  _
	Public Property Fecha() As String
		Get
			Return Me._Fecha
		End Get
		Set
			If (String.Equals(Me._Fecha, value) = false) Then
				Me.OnFechaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha = value
				Me.SendPropertyChanged("Fecha")
				Me.OnFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Historia", DbType:="VarChar(MAX)")>  _
	Public Property Historia() As String
		Get
			Return Me._Historia
		End Get
		Set
			If (String.Equals(Me._Historia, value) = false) Then
				Me.OnHistoriaChanging(value)
				Me.SendPropertyChanging
				Me._Historia = value
				Me.SendPropertyChanged("Historia")
				Me.OnHistoriaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Medicacion", DbType:="VarChar(MAX)")>  _
	Public Property Medicacion() As String
		Get
			Return Me._Medicacion
		End Get
		Set
			If (String.Equals(Me._Medicacion, value) = false) Then
				Me.OnMedicacionChanging(value)
				Me.SendPropertyChanging
				Me._Medicacion = value
				Me.SendPropertyChanged("Medicacion")
				Me.OnMedicacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nota", DbType:="VarChar(MAX)")>  _
	Public Property Nota() As String
		Get
			Return Me._Nota
		End Get
		Set
			If (String.Equals(Me._Nota, value) = false) Then
				Me.OnNotaChanging(value)
				Me.SendPropertyChanging
				Me._Nota = value
				Me.SendPropertyChanged("Nota")
				Me.OnNotaChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Calendario")>  _
Partial Public Class Calendario
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Fecha As System.Nullable(Of Date)
	
	Private _Nombre As String
	
	Private _Direccion As String
	
	Private _Comentario As String
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnFechaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaChanged()
    End Sub
    Partial Private Sub OnNombreChanging(value As String)
    End Sub
    Partial Private Sub OnNombreChanged()
    End Sub
    Partial Private Sub OnDireccionChanging(value As String)
    End Sub
    Partial Private Sub OnDireccionChanged()
    End Sub
    Partial Private Sub OnComentarioChanging(value As String)
    End Sub
    Partial Private Sub OnComentarioChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="Date")>  _
	Public Property Fecha() As System.Nullable(Of Date)
		Get
			Return Me._Fecha
		End Get
		Set
			If (Me._Fecha.Equals(value) = false) Then
				Me.OnFechaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha = value
				Me.SendPropertyChanged("Fecha")
				Me.OnFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nombre", DbType:="VarChar(50)")>  _
	Public Property Nombre() As String
		Get
			Return Me._Nombre
		End Get
		Set
			If (String.Equals(Me._Nombre, value) = false) Then
				Me.OnNombreChanging(value)
				Me.SendPropertyChanging
				Me._Nombre = value
				Me.SendPropertyChanged("Nombre")
				Me.OnNombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Direccion", DbType:="VarChar(50)")>  _
	Public Property Direccion() As String
		Get
			Return Me._Direccion
		End Get
		Set
			If (String.Equals(Me._Direccion, value) = false) Then
				Me.OnDireccionChanging(value)
				Me.SendPropertyChanging
				Me._Direccion = value
				Me.SendPropertyChanged("Direccion")
				Me.OnDireccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Comentario", DbType:="VarChar(50)")>  _
	Public Property Comentario() As String
		Get
			Return Me._Comentario
		End Get
		Set
			If (String.Equals(Me._Comentario, value) = false) Then
				Me.OnComentarioChanging(value)
				Me.SendPropertyChanging
				Me._Comentario = value
				Me.SendPropertyChanged("Comentario")
				Me.OnComentarioChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Citas")>  _
Partial Public Class Citas
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Paciente As String
	
	Private _Identidad As String
	
	Private _Fecha As System.Nullable(Of Date)
	
	Private _Hora As String
	
	Private _Observaciones As String
	
	Private _Estado As String
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnPacienteChanging(value As String)
    End Sub
    Partial Private Sub OnPacienteChanged()
    End Sub
    Partial Private Sub OnIdentidadChanging(value As String)
    End Sub
    Partial Private Sub OnIdentidadChanged()
    End Sub
    Partial Private Sub OnFechaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaChanged()
    End Sub
    Partial Private Sub OnHoraChanging(value As String)
    End Sub
    Partial Private Sub OnHoraChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    Partial Private Sub OnEstadoChanging(value As String)
    End Sub
    Partial Private Sub OnEstadoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Paciente", DbType:="VarChar(50)")>  _
	Public Property Paciente() As String
		Get
			Return Me._Paciente
		End Get
		Set
			If (String.Equals(Me._Paciente, value) = false) Then
				Me.OnPacienteChanging(value)
				Me.SendPropertyChanging
				Me._Paciente = value
				Me.SendPropertyChanged("Paciente")
				Me.OnPacienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Identidad", DbType:="VarChar(50)")>  _
	Public Property Identidad() As String
		Get
			Return Me._Identidad
		End Get
		Set
			If (String.Equals(Me._Identidad, value) = false) Then
				Me.OnIdentidadChanging(value)
				Me.SendPropertyChanging
				Me._Identidad = value
				Me.SendPropertyChanged("Identidad")
				Me.OnIdentidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="Date")>  _
	Public Property Fecha() As System.Nullable(Of Date)
		Get
			Return Me._Fecha
		End Get
		Set
			If (Me._Fecha.Equals(value) = false) Then
				Me.OnFechaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha = value
				Me.SendPropertyChanged("Fecha")
				Me.OnFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Hora", DbType:="VarChar(50)")>  _
	Public Property Hora() As String
		Get
			Return Me._Hora
		End Get
		Set
			If (String.Equals(Me._Hora, value) = false) Then
				Me.OnHoraChanging(value)
				Me.SendPropertyChanging
				Me._Hora = value
				Me.SendPropertyChanged("Hora")
				Me.OnHoraChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="VarChar(MAX)")>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones
		End Get
		Set
			If (String.Equals(Me._Observaciones, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Estado", DbType:="VarChar(50)")>  _
	Public Property Estado() As String
		Get
			Return Me._Estado
		End Get
		Set
			If (String.Equals(Me._Estado, value) = false) Then
				Me.OnEstadoChanging(value)
				Me.SendPropertyChanging
				Me._Estado = value
				Me.SendPropertyChanged("Estado")
				Me.OnEstadoChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Usuarios")>  _
Partial Public Class Usuarios
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Nombre As String
	
	Private _Identidad As String
	
	Private _Email As String
	
	Private _Password As String
	
	Private _Direccion As String
	
	Private _Telefono As String
	
	Private _Cargo As String
	
	Private _Foto As System.Data.Linq.Binary
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNombreChanging(value As String)
    End Sub
    Partial Private Sub OnNombreChanged()
    End Sub
    Partial Private Sub OnIdentidadChanging(value As String)
    End Sub
    Partial Private Sub OnIdentidadChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordChanged()
    End Sub
    Partial Private Sub OnDireccionChanging(value As String)
    End Sub
    Partial Private Sub OnDireccionChanged()
    End Sub
    Partial Private Sub OnTelefonoChanging(value As String)
    End Sub
    Partial Private Sub OnTelefonoChanged()
    End Sub
    Partial Private Sub OnCargoChanging(value As String)
    End Sub
    Partial Private Sub OnCargoChanged()
    End Sub
    Partial Private Sub OnFotoChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnFotoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nombre", DbType:="VarChar(100)")>  _
	Public Property Nombre() As String
		Get
			Return Me._Nombre
		End Get
		Set
			If (String.Equals(Me._Nombre, value) = false) Then
				Me.OnNombreChanging(value)
				Me.SendPropertyChanging
				Me._Nombre = value
				Me.SendPropertyChanged("Nombre")
				Me.OnNombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Identidad", DbType:="VarChar(50)")>  _
	Public Property Identidad() As String
		Get
			Return Me._Identidad
		End Get
		Set
			If (String.Equals(Me._Identidad, value) = false) Then
				Me.OnIdentidadChanging(value)
				Me.SendPropertyChanging
				Me._Identidad = value
				Me.SendPropertyChanged("Identidad")
				Me.OnIdentidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="VarChar(50)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="VarChar(50)")>  _
	Public Property Password() As String
		Get
			Return Me._Password
		End Get
		Set
			If (String.Equals(Me._Password, value) = false) Then
				Me.OnPasswordChanging(value)
				Me.SendPropertyChanging
				Me._Password = value
				Me.SendPropertyChanged("Password")
				Me.OnPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Direccion", DbType:="VarChar(100)")>  _
	Public Property Direccion() As String
		Get
			Return Me._Direccion
		End Get
		Set
			If (String.Equals(Me._Direccion, value) = false) Then
				Me.OnDireccionChanging(value)
				Me.SendPropertyChanging
				Me._Direccion = value
				Me.SendPropertyChanged("Direccion")
				Me.OnDireccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Telefono", DbType:="VarChar(8)")>  _
	Public Property Telefono() As String
		Get
			Return Me._Telefono
		End Get
		Set
			If (String.Equals(Me._Telefono, value) = false) Then
				Me.OnTelefonoChanging(value)
				Me.SendPropertyChanging
				Me._Telefono = value
				Me.SendPropertyChanged("Telefono")
				Me.OnTelefonoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cargo", DbType:="VarChar(50)")>  _
	Public Property Cargo() As String
		Get
			Return Me._Cargo
		End Get
		Set
			If (String.Equals(Me._Cargo, value) = false) Then
				Me.OnCargoChanging(value)
				Me.SendPropertyChanging
				Me._Cargo = value
				Me.SendPropertyChanged("Cargo")
				Me.OnCargoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Foto", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Foto() As System.Data.Linq.Binary
		Get
			Return Me._Foto
		End Get
		Set
			If (Object.Equals(Me._Foto, value) = false) Then
				Me.OnFotoChanging(value)
				Me.SendPropertyChanging
				Me._Foto = value
				Me.SendPropertyChanged("Foto")
				Me.OnFotoChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Historial")>  _
Partial Public Class Historial
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Codigo_Historial As String
	
	Private _Identidad As String
	
	Private _Paciente As String
	
	Private _Sexo As String
	
	Private _Edad As String
	
	Private _Telefono As String
	
	Private _Motivo_Consulta As String
	
	Private _Fecha As String
	
	Private _Antecedentes_Personales As String
	
	Private _Antecedentes_Familiares As String
	
	Private _HEA As String
	
	Private _Examen_Fisico As String
	
	Private _Examenes_Complementarios As String
	
	Private _PA As System.Nullable(Of Integer)
	
	Private _FC As System.Nullable(Of Integer)
	
	Private _FR As System.Nullable(Of Integer)
	
	Private _T As System.Nullable(Of Integer)
	
	Private _Peso As System.Nullable(Of Integer)
	
	Private _Diagnostico As String
	
	Private _Tratamiento As String
	
	Private _Historial1 As EntityRef(Of Historial)
	
	Private _Historial As EntityRef(Of Historial)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnCodigo_HistorialChanging(value As String)
    End Sub
    Partial Private Sub OnCodigo_HistorialChanged()
    End Sub
    Partial Private Sub OnIdentidadChanging(value As String)
    End Sub
    Partial Private Sub OnIdentidadChanged()
    End Sub
    Partial Private Sub OnPacienteChanging(value As String)
    End Sub
    Partial Private Sub OnPacienteChanged()
    End Sub
    Partial Private Sub OnSexoChanging(value As String)
    End Sub
    Partial Private Sub OnSexoChanged()
    End Sub
    Partial Private Sub OnEdadChanging(value As String)
    End Sub
    Partial Private Sub OnEdadChanged()
    End Sub
    Partial Private Sub OnTelefonoChanging(value As String)
    End Sub
    Partial Private Sub OnTelefonoChanged()
    End Sub
    Partial Private Sub OnMotivo_ConsultaChanging(value As String)
    End Sub
    Partial Private Sub OnMotivo_ConsultaChanged()
    End Sub
    Partial Private Sub OnFechaChanging(value As String)
    End Sub
    Partial Private Sub OnFechaChanged()
    End Sub
    Partial Private Sub OnAntecedentes_PersonalesChanging(value As String)
    End Sub
    Partial Private Sub OnAntecedentes_PersonalesChanged()
    End Sub
    Partial Private Sub OnAntecedentes_FamiliaresChanging(value As String)
    End Sub
    Partial Private Sub OnAntecedentes_FamiliaresChanged()
    End Sub
    Partial Private Sub OnHEAChanging(value As String)
    End Sub
    Partial Private Sub OnHEAChanged()
    End Sub
    Partial Private Sub OnExamen_FisicoChanging(value As String)
    End Sub
    Partial Private Sub OnExamen_FisicoChanged()
    End Sub
    Partial Private Sub OnExamenes_ComplementariosChanging(value As String)
    End Sub
    Partial Private Sub OnExamenes_ComplementariosChanged()
    End Sub
    Partial Private Sub OnPAChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPAChanged()
    End Sub
    Partial Private Sub OnFCChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnFCChanged()
    End Sub
    Partial Private Sub OnFRChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnFRChanged()
    End Sub
    Partial Private Sub OnTChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTChanged()
    End Sub
    Partial Private Sub OnPesoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPesoChanged()
    End Sub
    Partial Private Sub OnDiagnosticoChanging(value As String)
    End Sub
    Partial Private Sub OnDiagnosticoChanged()
    End Sub
    Partial Private Sub OnTratamientoChanging(value As String)
    End Sub
    Partial Private Sub OnTratamientoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Historial1 = CType(Nothing, EntityRef(Of Historial))
		Me._Historial = CType(Nothing, EntityRef(Of Historial))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				If Me._Historial.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo_Historial", DbType:="VarChar(50)")>  _
	Public Property Codigo_Historial() As String
		Get
			Return Me._Codigo_Historial
		End Get
		Set
			If (String.Equals(Me._Codigo_Historial, value) = false) Then
				Me.OnCodigo_HistorialChanging(value)
				Me.SendPropertyChanging
				Me._Codigo_Historial = value
				Me.SendPropertyChanged("Codigo_Historial")
				Me.OnCodigo_HistorialChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Identidad", DbType:="VarChar(50)")>  _
	Public Property Identidad() As String
		Get
			Return Me._Identidad
		End Get
		Set
			If (String.Equals(Me._Identidad, value) = false) Then
				Me.OnIdentidadChanging(value)
				Me.SendPropertyChanging
				Me._Identidad = value
				Me.SendPropertyChanged("Identidad")
				Me.OnIdentidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Paciente", DbType:="VarChar(50)")>  _
	Public Property Paciente() As String
		Get
			Return Me._Paciente
		End Get
		Set
			If (String.Equals(Me._Paciente, value) = false) Then
				Me.OnPacienteChanging(value)
				Me.SendPropertyChanging
				Me._Paciente = value
				Me.SendPropertyChanged("Paciente")
				Me.OnPacienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sexo", DbType:="VarChar(50)")>  _
	Public Property Sexo() As String
		Get
			Return Me._Sexo
		End Get
		Set
			If (String.Equals(Me._Sexo, value) = false) Then
				Me.OnSexoChanging(value)
				Me.SendPropertyChanging
				Me._Sexo = value
				Me.SendPropertyChanged("Sexo")
				Me.OnSexoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Edad", DbType:="VarChar(50)")>  _
	Public Property Edad() As String
		Get
			Return Me._Edad
		End Get
		Set
			If (String.Equals(Me._Edad, value) = false) Then
				Me.OnEdadChanging(value)
				Me.SendPropertyChanging
				Me._Edad = value
				Me.SendPropertyChanged("Edad")
				Me.OnEdadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Telefono", DbType:="VarChar(50)")>  _
	Public Property Telefono() As String
		Get
			Return Me._Telefono
		End Get
		Set
			If (String.Equals(Me._Telefono, value) = false) Then
				Me.OnTelefonoChanging(value)
				Me.SendPropertyChanging
				Me._Telefono = value
				Me.SendPropertyChanged("Telefono")
				Me.OnTelefonoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Motivo_Consulta", DbType:="VarChar(MAX)")>  _
	Public Property Motivo_Consulta() As String
		Get
			Return Me._Motivo_Consulta
		End Get
		Set
			If (String.Equals(Me._Motivo_Consulta, value) = false) Then
				Me.OnMotivo_ConsultaChanging(value)
				Me.SendPropertyChanging
				Me._Motivo_Consulta = value
				Me.SendPropertyChanged("Motivo_Consulta")
				Me.OnMotivo_ConsultaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="VarChar(50)")>  _
	Public Property Fecha() As String
		Get
			Return Me._Fecha
		End Get
		Set
			If (String.Equals(Me._Fecha, value) = false) Then
				Me.OnFechaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha = value
				Me.SendPropertyChanged("Fecha")
				Me.OnFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Antecedentes_Personales", DbType:="VarChar(MAX)")>  _
	Public Property Antecedentes_Personales() As String
		Get
			Return Me._Antecedentes_Personales
		End Get
		Set
			If (String.Equals(Me._Antecedentes_Personales, value) = false) Then
				Me.OnAntecedentes_PersonalesChanging(value)
				Me.SendPropertyChanging
				Me._Antecedentes_Personales = value
				Me.SendPropertyChanged("Antecedentes_Personales")
				Me.OnAntecedentes_PersonalesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Antecedentes_Familiares", DbType:="VarChar(MAX)")>  _
	Public Property Antecedentes_Familiares() As String
		Get
			Return Me._Antecedentes_Familiares
		End Get
		Set
			If (String.Equals(Me._Antecedentes_Familiares, value) = false) Then
				Me.OnAntecedentes_FamiliaresChanging(value)
				Me.SendPropertyChanging
				Me._Antecedentes_Familiares = value
				Me.SendPropertyChanged("Antecedentes_Familiares")
				Me.OnAntecedentes_FamiliaresChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HEA", DbType:="VarChar(MAX)")>  _
	Public Property HEA() As String
		Get
			Return Me._HEA
		End Get
		Set
			If (String.Equals(Me._HEA, value) = false) Then
				Me.OnHEAChanging(value)
				Me.SendPropertyChanging
				Me._HEA = value
				Me.SendPropertyChanged("HEA")
				Me.OnHEAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Examen_Fisico", DbType:="VarChar(MAX)")>  _
	Public Property Examen_Fisico() As String
		Get
			Return Me._Examen_Fisico
		End Get
		Set
			If (String.Equals(Me._Examen_Fisico, value) = false) Then
				Me.OnExamen_FisicoChanging(value)
				Me.SendPropertyChanging
				Me._Examen_Fisico = value
				Me.SendPropertyChanged("Examen_Fisico")
				Me.OnExamen_FisicoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Examenes_Complementarios", DbType:="VarChar(MAX)")>  _
	Public Property Examenes_Complementarios() As String
		Get
			Return Me._Examenes_Complementarios
		End Get
		Set
			If (String.Equals(Me._Examenes_Complementarios, value) = false) Then
				Me.OnExamenes_ComplementariosChanging(value)
				Me.SendPropertyChanging
				Me._Examenes_Complementarios = value
				Me.SendPropertyChanged("Examenes_Complementarios")
				Me.OnExamenes_ComplementariosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PA", DbType:="Int")>  _
	Public Property PA() As System.Nullable(Of Integer)
		Get
			Return Me._PA
		End Get
		Set
			If (Me._PA.Equals(value) = false) Then
				Me.OnPAChanging(value)
				Me.SendPropertyChanging
				Me._PA = value
				Me.SendPropertyChanged("PA")
				Me.OnPAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FC", DbType:="Int")>  _
	Public Property FC() As System.Nullable(Of Integer)
		Get
			Return Me._FC
		End Get
		Set
			If (Me._FC.Equals(value) = false) Then
				Me.OnFCChanging(value)
				Me.SendPropertyChanging
				Me._FC = value
				Me.SendPropertyChanged("FC")
				Me.OnFCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FR", DbType:="Int")>  _
	Public Property FR() As System.Nullable(Of Integer)
		Get
			Return Me._FR
		End Get
		Set
			If (Me._FR.Equals(value) = false) Then
				Me.OnFRChanging(value)
				Me.SendPropertyChanging
				Me._FR = value
				Me.SendPropertyChanged("FR")
				Me.OnFRChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_T", DbType:="Int")>  _
	Public Property T() As System.Nullable(Of Integer)
		Get
			Return Me._T
		End Get
		Set
			If (Me._T.Equals(value) = false) Then
				Me.OnTChanging(value)
				Me.SendPropertyChanging
				Me._T = value
				Me.SendPropertyChanged("T")
				Me.OnTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Peso", DbType:="Int")>  _
	Public Property Peso() As System.Nullable(Of Integer)
		Get
			Return Me._Peso
		End Get
		Set
			If (Me._Peso.Equals(value) = false) Then
				Me.OnPesoChanging(value)
				Me.SendPropertyChanging
				Me._Peso = value
				Me.SendPropertyChanged("Peso")
				Me.OnPesoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Diagnostico", DbType:="VarChar(MAX)")>  _
	Public Property Diagnostico() As String
		Get
			Return Me._Diagnostico
		End Get
		Set
			If (String.Equals(Me._Diagnostico, value) = false) Then
				Me.OnDiagnosticoChanging(value)
				Me.SendPropertyChanging
				Me._Diagnostico = value
				Me.SendPropertyChanged("Diagnostico")
				Me.OnDiagnosticoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tratamiento", DbType:="VarChar(MAX)")>  _
	Public Property Tratamiento() As String
		Get
			Return Me._Tratamiento
		End Get
		Set
			If (String.Equals(Me._Tratamiento, value) = false) Then
				Me.OnTratamientoChanging(value)
				Me.SendPropertyChanging
				Me._Tratamiento = value
				Me.SendPropertyChanged("Tratamiento")
				Me.OnTratamientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Historial_Historial", Storage:="_Historial1", ThisKey:="Id", OtherKey:="Id", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property Historial1() As Historial
		Get
			Return Me._Historial1.Entity
		End Get
		Set
			Dim previousValue As Historial = Me._Historial1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Historial1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Historial1.Entity = Nothing
					previousValue.Historial = Nothing
				End If
				Me._Historial1.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.Historial = Me
				End If
				Me.SendPropertyChanged("Historial1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Historial_Historial", Storage:="_Historial", ThisKey:="Id", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Historial() As Historial
		Get
			Return Me._Historial.Entity
		End Get
		Set
			Dim previousValue As Historial = Me._Historial.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Historial.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Historial.Entity = Nothing
					previousValue.Historial1 = Nothing
				End If
				Me._Historial.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Historial1 = Me
					Me._Id = value.Id
				Else
					Me._Id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Historial")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
